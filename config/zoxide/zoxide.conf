#! /usr/bin/env zsh

export _ZO_ECHO=1
export _ZO_MAXAGE=10000
export _ZO_DATA_DIR=$XDG_DATA_HOME/zoxide && mkdir -p $_ZO_DATA_DIR
export _ZO_FZF_OPTS="--preview 'command lsd --tree --color always --icon always {2..}'"
export _ZO_EXCLUDE_DIRS=""
export _ZO_RESOLVE_SYMLINKS=1

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
__zoxide_pwd() { \builtin pwd -P}

# cd + custom logic based on the value of _ZO_ECHO.
__zoxide_cd() { \builtin cd -- "$@" && __zoxide_pwd }

# Hook to add new entries to the database.
__zoxide_hook() { \command zoxide add -- "$(__zoxide_pwd)" }

if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && \
   [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]
then
    chpwd_functions+=(__zoxide_hook)
fi

# Jump to a directory using only keywords.
__zoxide_z() {
  if [[ "$#" -eq 0 ]]; then
    __zoxide_cd ~
  elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = "-" ]] || [[ "$1" =~ ^[-+][0-9]$ ]]; }; then
    __zoxide_cd $1
  elif [[ "$#" -eq 2 ]] && [[ "$1" = "--" ]]; then
    __zoxide_cd $2
  else
    \builtin local result
    result=$( \
      \command zoxide query --exclude $(__zoxide_pwd) -- $@) &&\
      __zoxide_cd $result
  fi
}

# Jump to a directory using interactive search.
__zoxide_zi() { 
  \builtin local result && \
  result=$(\
    \command zoxide query --interactive -- $@\
  ) && __zoxide_cd $result
}

z() { __zoxide_z $@ }
zi() { __zoxide_zi $@ }

if [[ -o zle ]]
then
  __zoxide_result=""
  __zoxide_z_complete() { [[ ${#words[@]} -eq $CURRENT ]] || return 0
  
  if [[ ${#words[@]} -eq 2 ]]
  then
    _cd -/
  elif [[ ${words[-1]} == "" ]]
  then
    __zoxide_result=$( \command zoxide query --exclude $(__zoxide_pwd || \builtin true) --interactive -- ${words[2,-1]}) || __zoxide_result=""
    compadd -Q ""
    \builtin bindkey '\e[0n' '__zoxide_z_complete_helper'
    \builtin printf '\e[5n'
    return 0
    fi
  }

  __zoxide_z_complete_helper() {
    if [[ -n "${__zoxide_result}" ]]
    then
      BUFFER="z ${(q-)__zoxide_result}"
      __zoxide_result=""
      \builtin zle reset-prompt
      \builtin zle accept-line
    else
      \builtin zle reset-prompt
    fi
  }

  \builtin zle -N __zoxide_z_complete_helper

#  [[ ${+functions[compdef]} -ne 0 ]] && \compdef __zoxide_z_complete zn fi

eval "$(zoxide init zsh)"



